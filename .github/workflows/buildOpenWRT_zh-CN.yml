# This is a basic workflow to help you get started with Actions

name: 编译OpenWRT固件

on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_repourl:
        description: 'Openwrt 仓库地址'
        default: 'https://github.com/openwrt/openwrt'
      openwrt_branch:
        description: 'Openwrt 版本分支'
        default: 'v21.02.1'
      feeds_file:
        description: 'feeds 文件路径'
        default: 'XIAOMI-4A_GIGABit/feeds.conf.default'
      config_file:
        description: 'config 文件路径'
        default: 'XIAOMI-4A_GIGABit/.config'
      files_path:
        description: 'files 补丁目录'
        default: 'XIAOMI-4A_GIGABit/files'
      openwrt_patch:
        description: 'openwrt 补丁路径'
        default: 'XIAOMI-4A_GIGABit/patch.sh'
      befor_file:
        description: '编译前脚本路径'
        default: 'XIAOMI-4A_GIGABit/make_befor.sh'
      after_file:
        description: '编译后脚本路径'
        default: 'XIAOMI-4A_GIGABit/make_after.sh'
      upload_bindir:
        type: choice
        description: '上传bin目录'
        options:
        - false
        - true
      upload_release:
        type: choice
        description: '发布到release'
        options:
        - false
        - true
env:
  OpenWrt_URL: ${{ github.event.inputs.openwrt_repourl }}
  OpenWrt_BRANCH: ${{ github.event.inputs.openwrt_branch }}
  FEEDS_CONF: ${{ github.event.inputs.feeds_file }}
  CONFIG_FILE: ${{ github.event.inputs.config_file }}
  FILES_PATH: ${{ github.event.inputs.files_path }}
  PATCH_SH: ${{ github.event.inputs.openwrt_patch }}
  BEFORMAKE_SH: ${{ github.event.inputs.befor_file }}
  AFTERMAKE_SH: ${{ github.event.inputs.after_file }}
  
  
  TIME_ZONE: Asia/Shanghai
  UPLOAD_FIRMWARE: true
  
  UPLOAD_BinDIR: ${{ github.event.inputs.upload_bindir }}
  UPLOAD_RELEASE: ${{ github.event.inputs.upload_release }}
  
jobs: 
  build: 
    runs-on: ubuntu-20.04
    
    steps:
    - name: 检出项目
      uses: actions/checkout@main
      
    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
        #非交互式环境
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TIME_ZONE"
        sudo mkdir -p /XIAOMI-4A_100M
        sudo chown $USER:$GROUPS /XIAOMI-4A_100M
    
    - name: 硬件信息
      working-directory: /XIAOMI-4A_100M
      run: |
         echo -e "CPU: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo -e "UserName: $(whoami) \n"
         echo -e "SystemInfo: \n$(lsb_release  -a 2>&1 | grep -vi 'No LSB') \n"
         
         
    - name: 拉取源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $OpenWrt_URL -b $OpenWrt_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 替换自定义源
      run: |
        [ -e $FEEDS_CONF ] && echo "自定义源文件存在" || echo "自定义源文件不存在"
        [ -e $FEEDS_CONF ] && mv rm -f openwrt/feeds.conf.default
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
    - name: 加载固件配置
      run: |
        [ -e $CONFIG_FILE ] && echo "固件配置文件存在" || echo "固件配置文件不存在"
        [ -e $CONFIG_FILE ] && mv rm -f openwrt/.config
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
    
    - name: 加载files目录
      run: |
        [ -e $FILES_PATH ] && echo "目录存在" || echo "目录不存在"
        [ -e $FILES_PATH ] && mv $FILES_PATH openwrt/files
        
    - name: 执行OpenWRT补丁脚本
      run: |
        [ -e $PATCH_SH ] && echo "补丁文件存在" || echo "补丁文件不存在"
        [ -e $PATCH_SH ] && chmod +x $PATCH_SH
        [ -e $PATCH_SH ] && cd openwrt
        [ -e $PATCH_SH ] && $GITHUB_WORKSPACE/$PATCH_SH
    
    - name: 更新并安装Feeds
      run: |
        cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a && ./scripts/feeds update -a && ./scripts/feeds install -a
        
    - name: 执行编译前脚本
      run: |
        [ -e $BEFORMAKE_SH ] && echo "编译前脚本文件存在" || echo "编译前脚本文件不存在"
        [ -e BEFORMAKE_SH ] && chmod +x $BEFORMAKE_SH
        [ -e BEFORMAKE_SH ] && cd openwrt
        [ -e BEFORMAKE_SH ] && $GITHUB_WORKSPACE/$BEFORMAKE_SH
    
    - name: 下载编译所需
      id: makedown
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 编译固件
      id: make
      run: |
        cd openwrt
        echo -e "$(nproc) thread cpu"
        echo "Start Time: "$(date +"%Y/%m/%d %H:%M:%S")""
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "End Time: "$(date +"%Y/%m/%d %H:%M:%S")""
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    
    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT
      
    - name: 执行编译后脚本
      run: |
        [ -e $AFTERMAKE_SH ] && echo "编译后脚本文件存在" || echo "编译后脚本文件不存在"
        [ -e $AFTERMAKE_SH ] && chmod +x $AFTERMAKE_SH
        [ -e $AFTERMAKE_SH ] && cd openwrt
        [ -e $AFTERMAKE_SH ] && $GITHUB_WORKSPACE/$AFTERMAKE_SH
      
    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BinDIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
    
    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
       
    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: 生成release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
    - name: 上传固件到release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 退出workflow
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧的 Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
